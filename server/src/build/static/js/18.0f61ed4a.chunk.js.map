{"version":3,"sources":["component/CategoryForm.js","component/DeleteFormCategory.js","../node_modules/@mui/icons-material/Close.js","../node_modules/nanoid/index.browser.js","component/AddGradeForm.js","page/Category.js"],"names":["useStyles","makeStyles","theme","CategoryForm","props","useContext","CategoryContext","categoryDispatch","category","SnackbarContext","openSnackbarDispatch","openSnackbar","dataArr","languageSelect","flanguage","categoryName","categoryField","edit","keyField","useState","open","setOpen","useForm","handleSubmit","control","setValue","errors","formState","reset","handleClose","handleOpen","useEffect","Object","keys","forEach","key","undefined","onClick","style","marginRight","info","small","success","PaperProps","minWidth","onClose","id","disabled","nameTitle","name","rules","required","select","validate","value","defaultValue","onChange","e","target","map","l","MaNgoaiNgu","TenNgoaiNgu","data","updateCategory","createCategory","btn","color","palette","common","white","backgroundColor","error","main","dark","margin","inputItem","marginBottom","spacing","DeleteFormCategory","classes","title","fullWidth","className","dialogContent","removeCategory","_interopRequireDefault","require","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","inputWrapper","position","closeIcon","top","right","cursor","AddGradeForm","year","valueArray","setValueArray","update","setUpdate","add","setAdd","remove","setRemove","getValues","categories","grade","length","c","Nam","Data","arr","index","TenLoai","push","MaLoai","a","MyButton","Dialog","DialogTitle","DialogContent","InputGrid","el","i","UpdateEl","handleChangeInput","newData","splice","includes","handleRemoveInput","input","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","inputName","list","handleChangeAddInput","handleRemoveAddInput","Button","marginTop","variant","DialogActions","addArr","actionGrade","header","headerContent","textTransform","fontWeight","paper","display","alignItems","padding","inputSelect","table","width","Category","setCategoryField","setCategoryName","setLanguageSelect","setKey","columnName","setColumnName","rows","setRows","columns","setColumns","getFLArray","getLanguage","res","newColumn","col","field","render","params","filter","categoryNames","obj","getKeyField","getAllCategory","Layout","sidebar","Typography","Paper","MySelect","document","querySelector","innerText","autowidth","MenuItem","TableContainer","maxWidth","components","Container","options","exportAllData","isLoading","loading"],"mappings":"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","file":"static/js/18.0f61ed4a.chunk.js","sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport {\r\n    Button,\r\n    Dialog, DialogActions,\r\n    DialogContent, DialogTitle, MenuItem\r\n} from '@mui/material';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { createCategory, updateCategory } from '../action/categoryAction';\r\nimport { CategoryContext } from '../contextAPI/CategoryContext';\r\nimport { SnackbarContext } from '../contextAPI/SnackbarContext';\r\nimport InputGrid from './InputGrid';\r\nimport MyButton from './UI/MyButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n}))\r\n\r\nconst CategoryForm = (props) => {\r\n    const classes = useStyles();\r\n    const { category, categoryDispatch } = useContext(CategoryContext);\r\n    const { openSnackbar, openSnackbarDispatch } = useContext(SnackbarContext)\r\n    const { dataArr, flanguage, languageSelect, categoryName, categoryField, edit, keyField } = props\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        setValue,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm();\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleChangeSelect = (e) => {\r\n        setValue(e.target.name, e.target.value)\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        Object.keys(data).forEach(key => (data[key] == undefined || data[key] == '0') && delete data[key])\r\n        if (edit) {\r\n            updateCategory(categoryDispatch, { categoryField, id: dataArr[`${keyField[0]}`], data }, openSnackbarDispatch)\r\n        } else {\r\n            createCategory(categoryDispatch, { categoryField, data }, openSnackbarDispatch)\r\n        }\r\n        handleClose();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (edit) {\r\n            Object.keys(dataArr).forEach(key => setValue(key, dataArr[key]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!edit)\r\n            if (open == false)\r\n                if (categoryField == \"flanguagelevel\") {\r\n                    setValue(\"MaNgoaiNgu\", '0');\r\n                    setValue(\"TenTrinhDo\", undefined)\r\n                } else\r\n                    reset();\r\n    }, [open])\r\n\r\n    return (\r\n        <>\r\n            {edit ?\r\n                (\r\n                    <MyButton onClick={handleOpen} style={{ marginRight: '8px' }} info={true} small><EditIcon />Sửa</MyButton>\r\n                ) :\r\n                (\r\n                    <MyButton onClick={handleOpen} success={true} ><AddIcon />Thêm</MyButton>\r\n                )\r\n            }\r\n            <Dialog PaperProps={{ style: { minWidth: categoryField == \"achievement\" ? '700px' : '300px' } }} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">{`Cập nhật ${categoryName}`}</DialogTitle>\r\n                <DialogContent>\r\n                    {edit &&\r\n                        <InputGrid\r\n                            disabled\r\n                            nameTitle={`Mã ${categoryName}`}\r\n                            name={keyField[0]}\r\n                            control={control}\r\n                            errors={errors}\r\n                        />\r\n                    }\r\n                    <InputGrid\r\n                        nameTitle={`Tên ${categoryName}`}\r\n                        name={keyField[1]}\r\n                        control={control}\r\n                        rules={{ required: \"Vui lòng nhập trường này!\" }}\r\n                        errors={errors}\r\n                    />\r\n                    {categoryField == \"flanguagelevel\" &&\r\n                        <InputGrid\r\n                            select\r\n                            nameTitle={\"Tên Ngoại Ngữ\"}\r\n                            name={\"MaNgoaiNgu\"}\r\n                            rules={{\r\n                                validate: value =>\r\n                                    value != \"0\" || \"Vui lòng nhập trường này!\"\r\n                            }}\r\n                            defaultValue={\"0\"}\r\n                            control={control}\r\n                            errors={errors}\r\n                            onChange={handleChangeSelect}\r\n                        >\r\n                            <MenuItem value=\"0\">Chọn ngoại ngữ</MenuItem>\r\n                            {languageSelect.map(\r\n                                l => <MenuItem key={l.MaNgoaiNgu} value={l.MaNgoaiNgu}>{l.TenNgoaiNgu}</MenuItem>\r\n                            )}\r\n                        </InputGrid>\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} >\r\n                        Hủy\r\n                    </Button>\r\n                    <MyButton onClick={handleSubmit(onSubmit)} info>\r\n                        Lưu\r\n                    </MyButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","import DeleteIcon from '@mui/icons-material/Delete';\r\nimport {\r\n    Button,\r\n    Dialog, DialogActions,\r\n    DialogContent, DialogTitle\r\n} from '@mui/material';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport React, { useContext, useState } from 'react';\r\nimport { removeCategory } from '../action/categoryAction';\r\nimport { CategoryContext } from '../contextAPI/CategoryContext';\r\nimport { SnackbarContext } from '../contextAPI/SnackbarContext';\r\nimport MyButton from './UI/MyButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    btn: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.error.main,\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.error.dark\r\n        },\r\n        margin: '0 4px'\r\n    },\r\n    inputItem: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}))\r\n\r\nconst DeleteFormCategory = (props) => {\r\n    const classes = useStyles();\r\n    const { id, name, title, categoryField } = props;\r\n    const { category, categoryDispatch } = useContext(CategoryContext);\r\n    const { openSnackbar, openSnackbarDispatch } = useContext(SnackbarContext)\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n    const handleSubmit = () => {\r\n        removeCategory(categoryDispatch, { categoryField, id }, openSnackbarDispatch)\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MyButton onClick={handleOpen} error={true} small><DeleteIcon />Xóa</MyButton>\r\n            <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Xóa {props.title}</DialogTitle>\r\n                <DialogContent className={classes.dialogContent}>\r\n                    Bạn có muốn xóa {title} \"{name}\"?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} >\r\n                        Hủy\r\n                    </Button>\r\n                    <MyButton onClick={handleSubmit} error={true}>\r\n                        Xóa\r\n                    </MyButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeleteFormCategory;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import AddIcon from '@mui/icons-material/Add';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport {\r\n    Button,\r\n    Dialog, DialogActions,\r\n    DialogContent, DialogTitle\r\n} from '@mui/material';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { nanoid } from 'nanoid';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { actionGrade } from '../action/categoryAction';\r\nimport { CategoryContext } from '../contextAPI/CategoryContext';\r\nimport { SnackbarContext } from '../contextAPI/SnackbarContext';\r\nimport InputGrid from './InputGrid';\r\nimport MyButton from './UI/MyButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    inputWrapper: {\r\n        position: 'relative',\r\n    },\r\n    closeIcon: {\r\n        position: 'absolute',\r\n        top: '8px',\r\n        right: '8px',\r\n        backgroundColor: theme.palette.common.white,\r\n        cursor: 'pointer'\r\n    }\r\n}))\r\n\r\nconst AddGradeForm = (props) => {\r\n    const classes = useStyles();\r\n    const { edit, year } = props\r\n    const [open, setOpen] = useState(false)\r\n    const { category, categoryDispatch } = useContext(CategoryContext);\r\n    const { openSnackbar, openSnackbarDispatch } = useContext(SnackbarContext)\r\n    const [valueArray, setValueArray] = useState([])\r\n    const [update, setUpdate] = useState([])\r\n    const [add, setAdd] = useState(edit ? [] : [{ name: \"\", value: \"\", id: \"\" }])\r\n    const [remove, setRemove] = useState([])\r\n\r\n    const getData = () => {\r\n        category.categories.grade.map(c => {\r\n            if (c.Nam == year)\r\n                if (c.Data.length > 0) {\r\n                    let arr = [];\r\n                    c.Data.forEach((data, index) => {\r\n                        setValue(\"Nam\", year)\r\n                        setValue(`Loai${index + 1}`, data.TenLoai);\r\n                        arr.push({ name: `Loai${index + 1}`, value: data.TenLoai, id: data.MaLoai });\r\n                    })\r\n                    setValueArray(arr);\r\n                }\r\n        })\r\n    }\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        setValue,\r\n        formState: { errors },\r\n        getValues,\r\n        reset,\r\n    } = useForm();\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n    const handleChangeInput = (e, id) => {\r\n        setValue(e.target.name, e.target.value);\r\n        let index = -1;\r\n        update.forEach((el, i) => index = el[\"MaLoai\"] == id ? i : -1)\r\n        if (index != -1) {\r\n            let UpdateEl = [...update];\r\n            UpdateEl[index] = { MaLoai: id, TenLoai: e.target.value }\r\n            setUpdate(UpdateEl)\r\n        } else\r\n            setUpdate([...update, { MaLoai: id, TenLoai: e.target.value }])\r\n    }\r\n    const handleChangeAddInput = (e, index) => {\r\n        const { name, value } = e.target\r\n        setValue(name, value);\r\n        const list = [...add];\r\n        list[index].name = name;\r\n        list[index].value = value;\r\n        setAdd(list);\r\n    }\r\n    const handleAddInput = () => {\r\n        setAdd([...add, { name: \"\", value: \"\" }])\r\n    }\r\n    const handleRemoveInput = (id, index) => {\r\n        let newData = [...valueArray];\r\n        setValue(`Loai${index + 1}`, '');\r\n        newData.splice(index, 1);\r\n        setValueArray(newData);\r\n\r\n        remove.includes(id) || setRemove([...remove, id])\r\n    }\r\n    const handleRemoveAddInput = (index) => {\r\n        let list = [...add];\r\n        setAdd(list[index], \"\")\r\n        list.splice(index, 1);\r\n        setAdd(list);\r\n    }\r\n    const onSubmit = () => {\r\n        let year = getValues(\"Nam\");\r\n        let addArr = [];\r\n        add.forEach(el => addArr.push(el[\"value\"]));\r\n        actionGrade(categoryDispatch, { add: addArr, update, remove, year }, openSnackbarDispatch);\r\n        reset();\r\n        handleClose();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (category.categories.grade.length > 0 && edit)\r\n            getData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        add.forEach(a => setValue(a.name, a.value))\r\n    }, [add])\r\n\r\n    useEffect(() => {\r\n        valueArray.forEach(d => setValue(d.name, d.value))\r\n    }, [valueArray])\r\n\r\n    return (\r\n        <>\r\n            {edit ?\r\n                (\r\n                    <MyButton onClick={handleOpen} style={{ marginRight: '8px' }} info small><EditIcon />Sửa</MyButton>\r\n                ) :\r\n                (\r\n                    <MyButton onClick={handleOpen} success ><AddIcon />Thêm</MyButton>\r\n                )\r\n            }\r\n            <Dialog PaperProps={{ style: { minWidth: '600px' } }} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">{`Cập nhật loại Đảng viên`}</DialogTitle>\r\n                <DialogContent>\r\n                    <InputGrid\r\n                        onChange={(e) => setValue('Nam', e.target.value)}\r\n                        disabled={edit}\r\n                        nameTitle={`Năm`}\r\n                        name={\"Nam\"}\r\n                        defaultValue={\"\"}\r\n                        control={control}\r\n                        rules={{ required: \"Vui lòng nhập trường này!\" }}\r\n                        errors={errors}\r\n                    />\r\n                    {valueArray.length > 0 &&\r\n                        valueArray.map((c, index) => {\r\n                            return (\r\n                                <div key={c.id} className={classes.inputWrapper}>\r\n                                    <InputGrid\r\n                                        id={c.id}\r\n                                        onChange={(e) => handleChangeInput(e, c.id)}\r\n                                        nameTitle={`Tên loại`}\r\n                                        name={c.name}\r\n                                        defaultValue={\"\"}\r\n                                        control={control}\r\n                                        rules={{ required: \"Vui lòng nhập trường này!\" }}\r\n                                        errors={errors}\r\n                                    />\r\n                                    <CloseIcon id=\"close-icon\"\r\n                                        className={classes.closeIcon}\r\n                                        onClick={() => handleRemoveInput(c.id, index)}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    {add.length > 0 &&\r\n                        add.map((input, index) => {\r\n                            let id = nanoid()\r\n                            let inputName = input.name || `LoaiThem${id}`;\r\n                            return (\r\n                                <div className={classes.inputWrapper}>\r\n                                    <InputGrid\r\n                                        onChange={(e) => handleChangeAddInput(e, index)}\r\n                                        nameTitle={\"Tên loại\"}\r\n                                        name={inputName}\r\n                                        defaultValue={\"\"}\r\n                                        control={control}\r\n                                        rules={{ required: \"Vui lòng nhập trường này!\" }}\r\n                                        errors={errors}\r\n                                    />\r\n                                    <CloseIcon id=\"chandleRemoveAddInputlose-icon\"\r\n                                        className={classes.closeIcon}\r\n                                        onClick={() => handleRemoveAddInput(index)}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    <Button style={{ marginTop: '18px' }} id=\"add-btn\" onClick={handleAddInput} variant=\"outlined\" fullWidth><AddIcon /></Button>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} >\r\n                        Hủy\r\n                    </Button>\r\n                    <MyButton onClick={handleSubmit(onSubmit)} info>\r\n                        Lưu\r\n                    </MyButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddGradeForm;","import MaterialTable from '@material-table/core';\r\nimport { MenuItem, Paper, TableContainer, Typography } from '@mui/material';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { getAllCategory, getLanguage } from '../action/categoryAction';\r\nimport AddGradeForm from '../component/AddGradeForm';\r\nimport CategoryForm from '../component/CategoryForm';\r\nimport DeleteFormCategory from '../component/DeleteFormCategory';\r\nimport Layout from '../component/Layout';\r\nimport MySelect from '../component/UI/MySelect';\r\nimport { CategoryContext } from '../contextAPI/CategoryContext';\r\nimport { getKeyField } from '../utils/utils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginBottom: '40px'\r\n    },\r\n    headerContent: {\r\n        textTransform: 'uppercase',\r\n        fontWeight: '600',\r\n    },\r\n    paper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '16px',\r\n        marginBottom: '16px',\r\n    },\r\n    inputSelect: {\r\n        marginRight: '20px',\r\n    },\r\n    table: {\r\n        width: '100%',\r\n        backgroundColor: 'white',\r\n        marginTop: '18px',\r\n    },\r\n}))\r\n\r\nconst Category = () => {\r\n    const classes = useStyles();\r\n\r\n    const [categoryField, setCategoryField] = useState(\"ethnic\");\r\n    const [categoryName, setCategoryName] = useState(\"Dân tộc\");\r\n    const [languageSelect, setLanguageSelect] = useState([]);\r\n    const [key, setKey] = useState([]);\r\n    const [columnName, setColumnName] = useState([]);\r\n\r\n    const [rows, setRows] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const { category, categoryDispatch } = useContext(CategoryContext);\r\n\r\n    const getFieldName = (value) => {\r\n        const name = document.querySelector(`li[data-value=${value}]`)\r\n        return name.innerText;\r\n    }\r\n\r\n    const handleChangeField = (e) => {\r\n        setCategoryField(e.target.value);\r\n        setCategoryName(getFieldName(e.target.value));\r\n    }\r\n\r\n    const getFLArray = async () => {\r\n        const res = await getLanguage();\r\n        if (res.data.length > 0)\r\n            setLanguageSelect(res.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let newColumn = columnName.map((col, index) => {\r\n            return ({\r\n                title: col,\r\n                field: `${key[index]}`,\r\n            })\r\n        })\r\n        newColumn.push({\r\n            title: \"Chức năng\",\r\n            field: \"action\",\r\n            render: (params) => {\r\n                const dataArr = { ...params }\r\n                Object.keys(dataArr).filter(key => (key == \"SoDangVien\" || key == \"tableData\") && delete dataArr[key])\r\n                return (\r\n                    <>\r\n                        {categoryField == \"grade\" ?\r\n                            (\r\n                                <AddGradeForm\r\n                                    edit\r\n                                    year={params[\"Nam\"]}\r\n                                />\r\n                            ) :\r\n                            (\r\n                                <>\r\n                                    <CategoryForm\r\n                                        edit\r\n                                        categoryName={categoryName}\r\n                                        dataArr={dataArr}\r\n                                        flanguage={categoryField == 'flanguagelevel' ? params[`${key[2]}`] : null}\r\n                                        languageSelect={languageSelect}\r\n                                        categoryField={categoryField}\r\n                                        keyField={key}\r\n                                    />\r\n                                    <DeleteFormCategory\r\n                                        id={dataArr[`${key[0]}`]}\r\n                                        name={dataArr[`${key[1]}`]}\r\n                                        title={categoryName}\r\n                                        dataArr={dataArr}\r\n                                        categoryField={categoryField}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        }\r\n                    </>\r\n                )\r\n            }\r\n        })\r\n        setColumns(newColumn);\r\n    }, [key])\r\n\r\n    useEffect(() => {\r\n        if (category.categoryNames[categoryField].length > 0) {\r\n            setColumnName(category.categoryNames[categoryField])\r\n            if (category.categories[categoryField].length > 0) {\r\n                let arr = []\r\n                if (categoryField == \"grade\") {\r\n                    category.categories[categoryField].forEach(c => {\r\n                        let obj = {};\r\n                        obj.Nam = c.Nam\r\n                        c.Data.forEach((d, index) => {\r\n                            obj[`Loai${index + 1}`] = d.TenLoai;\r\n                        })\r\n                        arr.push(obj);\r\n                    })\r\n                    setRows(arr);\r\n                } else\r\n                    setRows(category.categories[categoryField])\r\n            }\r\n            else\r\n                setRows([]);\r\n            setKey(getKeyField(categoryField))\r\n        }\r\n    }, [category])\r\n\r\n    useEffect(() => {\r\n        if (categoryField == 'flanguagelevel') {\r\n            getFLArray();\r\n        }\r\n        getAllCategory(categoryDispatch, categoryField);\r\n    }, [categoryField])\r\n\r\n    return (\r\n        <>\r\n            <Layout sidebar>\r\n                <div className={classes.header} >\r\n                    <Typography className={classes.headerContent} variant=\"h5\">\r\n                        Danh mục\r\n                    </Typography>\r\n                </div>\r\n                <Paper variant=\"outlined\" className={classes.paper}>\r\n                    <Typography className={classes.inputSelect}>Danh mục</Typography>\r\n                    <MySelect\r\n                        onChange={handleChangeField}\r\n                        value={categoryField}\r\n                        autowidth\r\n                    >\r\n                        <MenuItem value=\"ethnic\">Dân tộc</MenuItem>\r\n                        <MenuItem value=\"religion\">Tôn giáo</MenuItem>\r\n                        <MenuItem value=\"position\">Chức vụ</MenuItem>\r\n                        <MenuItem value=\"flanguage\">Ngoại ngữ</MenuItem>\r\n                        <MenuItem value=\"flanguagelevel\">Trình độ ngoại ngữ</MenuItem>\r\n                        <MenuItem value=\"it\">Trình độ tin học</MenuItem>\r\n                        <MenuItem value=\"politics\">Trình độ chính trị</MenuItem>\r\n                        <MenuItem value=\"grade\">Loại Đảng viên</MenuItem>\r\n                        {/* <MenuItem value=\"achievement\">Thành tích Đảng viên</MenuItem> */}\r\n                    </MySelect>\r\n                </Paper>\r\n\r\n                {/* Add form Category */}\r\n                {categoryField == \"grade\" ? (\r\n                    <AddGradeForm />\r\n                ) :\r\n                    (\r\n                        <CategoryForm\r\n                            categoryName={categoryName}\r\n                            languageSelect={languageSelect}\r\n                            categoryField={categoryField}\r\n                            keyField={key}\r\n                        />\r\n                    )\r\n                }\r\n                {/* <CSVLink data={rows} filename={\"export.csv\"}>\r\n                    <MyButton style={{ marginLeft: 8 }} success>\r\n                        <SaveAltIcon style={{ marginRight: 4 }} />Excel\r\n                    </MyButton>\r\n                </CSVLink> */}\r\n\r\n                <TableContainer className=\"category-table\" style={{ maxWidth: \"1170px\", }} >\r\n                    <MaterialTable\r\n                        components={{\r\n                            Container: (props) => <Paper\r\n                                {...props}\r\n                                className={classes.table}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        }}\r\n                        title={categoryName}\r\n                        columns={columns}\r\n                        data={rows}\r\n                        options={{\r\n                            padding: 'dense',\r\n                            exportAllData: true\r\n                        }}\r\n                        isLoading={category.loading}\r\n                    />\r\n                </TableContainer>\r\n            </Layout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Category;"],"sourceRoot":""}